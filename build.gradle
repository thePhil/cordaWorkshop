buildscript {
    ext {
        spring_boot_version = '2.1.3.RELEASE'
        spring_dep_mgmt_version = '1.0.6.RELEASE'
        spring_shell_version = '2.0.1.BUILD-SNAPSHOT'
        spring_fox_version = '2.9.2'
        junit_compile_version = '4.12'
        junit_version = '5.1.0'
        jib_version = '1.0.0'
        lombok_version = '1.18.6'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'

        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        corda_gradle_plugins_version = '4.0.42'
        quasar_version = '0.7.10'

        corda_platform_version = '4'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath("gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${jib_version}")

        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda" }
        maven { url "https://jitpack.io" }
        maven {
            url 'https://dl.bintray.com/palantir/releases' // docker-compose-rule is published on bintray
        }

    }

    group = 'com.swissre.tecconference'

    apply plugin: 'java'


    dependencies {
        compileOnly "org.projectlombok:lombok:${lombok_version}"
        annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

subprojects {
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
            maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda" }
            maven { url "https://jitpack.io" }
        }
        dependencies {
            classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
            classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
            classpath("io.spring.gradle:dependency-management-plugin:${spring_dep_mgmt_version}")
            classpath("gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${jib_version}")
        }
    }

    apply plugin: 'java'
    apply plugin: "com.google.cloud.tools.jib"

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda" }
        maven { url "https://jitpack.io" }
    }

    dependencies {

//        testCompileOnly(
//                "junit:junit:${junit_compile_version}"
//        )
//        testImplementation(
//                "org.junit.jupiter:junit-jupiter-api:${junit_version}"
//        )
//        testRuntimeOnly(
//                "org.junit.jupiter:junit-jupiter-engine:${junit_version}",
//                "org.junit.vintage:junit-vintage-engine:${junit_version}"
//        )
    }

//    test {
//        useJUnitPlatform()
//    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'
//apply plugin: 'net.corda.plugins.publish-utils'

cordapp {
    info {
        name "Swiss Re Teccoonference Corda Introduction"
        vendor "Swiss Re Management Ltd."
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

dependencies {
//    testCompile "junit:junit:$junit_version"
    compile "$corda_release_group:corda-rpc:$corda_release_version"
    compile "$corda_release_group:corda-core:$corda_release_version"
    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(':contract-states')
    cordapp project(':flows')

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contract-states')
        cordapp project(':flows')
    }
    node {
        name "O=Notary,L=Zurich,C=CH"
        notary = [validating: false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=PartyA,L=Zurich,C=CH"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

